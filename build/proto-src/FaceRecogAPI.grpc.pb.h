// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FaceRecogAPI.proto
#ifndef GRPC_FaceRecogAPI_2eproto__INCLUDED
#define GRPC_FaceRecogAPI_2eproto__INCLUDED

#include "FaceRecogAPI.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace facerecog {

class FaceRecogAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "facerecog.FaceRecogAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status faceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::facerecog::faceRecogUploadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogUploadResponse>> AsyncfaceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogUploadResponse>>(AsyncfaceRecogUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogUploadResponse>> PrepareAsyncfaceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogUploadResponse>>(PrepareAsyncfaceRecogUploadRaw(context, request, cq));
    }
    virtual ::grpc::Status faceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::facerecog::faceRecogRealtimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogRealtimeResponse>> AsyncfaceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogRealtimeResponse>>(AsyncfaceRecogRealtimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogRealtimeResponse>> PrepareAsyncfaceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogRealtimeResponse>>(PrepareAsyncfaceRecogRealtimeRaw(context, request, cq));
    }
    virtual ::grpc::Status faceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::facerecog::faceRecogHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogHistoryResponse>> AsyncfaceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogHistoryResponse>>(AsyncfaceRecogHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogHistoryResponse>> PrepareAsyncfaceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogHistoryResponse>>(PrepareAsyncfaceRecogHistoryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void faceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void faceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void faceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogUploadResponse>* AsyncfaceRecogUploadRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogUploadResponse>* PrepareAsyncfaceRecogUploadRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogRealtimeResponse>* AsyncfaceRecogRealtimeRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogRealtimeResponse>* PrepareAsyncfaceRecogRealtimeRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogHistoryResponse>* AsyncfaceRecogHistoryRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::facerecog::faceRecogHistoryResponse>* PrepareAsyncfaceRecogHistoryRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status faceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::facerecog::faceRecogUploadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogUploadResponse>> AsyncfaceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogUploadResponse>>(AsyncfaceRecogUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogUploadResponse>> PrepareAsyncfaceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogUploadResponse>>(PrepareAsyncfaceRecogUploadRaw(context, request, cq));
    }
    ::grpc::Status faceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::facerecog::faceRecogRealtimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogRealtimeResponse>> AsyncfaceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogRealtimeResponse>>(AsyncfaceRecogRealtimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogRealtimeResponse>> PrepareAsyncfaceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogRealtimeResponse>>(PrepareAsyncfaceRecogRealtimeRaw(context, request, cq));
    }
    ::grpc::Status faceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::facerecog::faceRecogHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogHistoryResponse>> AsyncfaceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogHistoryResponse>>(AsyncfaceRecogHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogHistoryResponse>> PrepareAsyncfaceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogHistoryResponse>>(PrepareAsyncfaceRecogHistoryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void faceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response, std::function<void(::grpc::Status)>) override;
      void faceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response, std::function<void(::grpc::Status)>) override;
      void faceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogUploadResponse>* AsyncfaceRecogUploadRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogUploadResponse>* PrepareAsyncfaceRecogUploadRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogRealtimeResponse>* AsyncfaceRecogRealtimeRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogRealtimeResponse>* PrepareAsyncfaceRecogRealtimeRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogHistoryResponse>* AsyncfaceRecogHistoryRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogHistoryResponse>* PrepareAsyncfaceRecogHistoryRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_faceRecogUpload_;
    const ::grpc::internal::RpcMethod rpcmethod_faceRecogRealtime_;
    const ::grpc::internal::RpcMethod rpcmethod_faceRecogHistory_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status faceRecogUpload(::grpc::ServerContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response);
    virtual ::grpc::Status faceRecogRealtime(::grpc::ServerContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response);
    virtual ::grpc::Status faceRecogHistory(::grpc::ServerContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_faceRecogUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_faceRecogUpload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_faceRecogUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogUpload(::grpc::ServerContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfaceRecogUpload(::grpc::ServerContext* context, ::facerecog::faceRecogUploadRequest* request, ::grpc::ServerAsyncResponseWriter< ::facerecog::faceRecogUploadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_faceRecogRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_faceRecogRealtime() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_faceRecogRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogRealtime(::grpc::ServerContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfaceRecogRealtime(::grpc::ServerContext* context, ::facerecog::faceRecogRealtimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::facerecog::faceRecogRealtimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_faceRecogHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_faceRecogHistory() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_faceRecogHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogHistory(::grpc::ServerContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfaceRecogHistory(::grpc::ServerContext* context, ::facerecog::faceRecogHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::facerecog::faceRecogHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_faceRecogUpload<WithAsyncMethod_faceRecogRealtime<WithAsyncMethod_faceRecogHistory<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_faceRecogUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_faceRecogUpload() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_faceRecogUpload<BaseClass>, ::facerecog::faceRecogUploadRequest, ::facerecog::faceRecogUploadResponse>(
          [this](::grpc::ServerContext* context,
                 const ::facerecog::faceRecogUploadRequest* request,
                 ::facerecog::faceRecogUploadResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->faceRecogUpload(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_faceRecogUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogUpload(::grpc::ServerContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void faceRecogUpload(::grpc::ServerContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_faceRecogRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_faceRecogRealtime() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_faceRecogRealtime<BaseClass>, ::facerecog::faceRecogRealtimeRequest, ::facerecog::faceRecogRealtimeResponse>(
          [this](::grpc::ServerContext* context,
                 const ::facerecog::faceRecogRealtimeRequest* request,
                 ::facerecog::faceRecogRealtimeResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->faceRecogRealtime(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_faceRecogRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogRealtime(::grpc::ServerContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void faceRecogRealtime(::grpc::ServerContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_faceRecogHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_faceRecogHistory() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_faceRecogHistory<BaseClass>, ::facerecog::faceRecogHistoryRequest, ::facerecog::faceRecogHistoryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::facerecog::faceRecogHistoryRequest* request,
                 ::facerecog::faceRecogHistoryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->faceRecogHistory(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_faceRecogHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogHistory(::grpc::ServerContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void faceRecogHistory(::grpc::ServerContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_faceRecogUpload<ExperimentalWithCallbackMethod_faceRecogRealtime<ExperimentalWithCallbackMethod_faceRecogHistory<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_faceRecogUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_faceRecogUpload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_faceRecogUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogUpload(::grpc::ServerContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_faceRecogRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_faceRecogRealtime() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_faceRecogRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogRealtime(::grpc::ServerContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_faceRecogHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_faceRecogHistory() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_faceRecogHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogHistory(::grpc::ServerContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_faceRecogUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_faceRecogUpload() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_faceRecogUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogUpload(::grpc::ServerContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfaceRecogUpload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_faceRecogRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_faceRecogRealtime() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_faceRecogRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogRealtime(::grpc::ServerContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfaceRecogRealtime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_faceRecogHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_faceRecogHistory() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_faceRecogHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogHistory(::grpc::ServerContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfaceRecogHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_faceRecogUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_faceRecogUpload() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_faceRecogUpload<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->faceRecogUpload(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_faceRecogUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogUpload(::grpc::ServerContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void faceRecogUpload(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_faceRecogRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_faceRecogRealtime() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_faceRecogRealtime<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->faceRecogRealtime(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_faceRecogRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogRealtime(::grpc::ServerContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void faceRecogRealtime(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_faceRecogHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_faceRecogHistory() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_faceRecogHistory<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->faceRecogHistory(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_faceRecogHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status faceRecogHistory(::grpc::ServerContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void faceRecogHistory(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_faceRecogUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_faceRecogUpload() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::facerecog::faceRecogUploadRequest, ::facerecog::faceRecogUploadResponse>(std::bind(&WithStreamedUnaryMethod_faceRecogUpload<BaseClass>::StreamedfaceRecogUpload, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_faceRecogUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status faceRecogUpload(::grpc::ServerContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfaceRecogUpload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::facerecog::faceRecogUploadRequest,::facerecog::faceRecogUploadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_faceRecogRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_faceRecogRealtime() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::facerecog::faceRecogRealtimeRequest, ::facerecog::faceRecogRealtimeResponse>(std::bind(&WithStreamedUnaryMethod_faceRecogRealtime<BaseClass>::StreamedfaceRecogRealtime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_faceRecogRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status faceRecogRealtime(::grpc::ServerContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfaceRecogRealtime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::facerecog::faceRecogRealtimeRequest,::facerecog::faceRecogRealtimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_faceRecogHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_faceRecogHistory() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::facerecog::faceRecogHistoryRequest, ::facerecog::faceRecogHistoryResponse>(std::bind(&WithStreamedUnaryMethod_faceRecogHistory<BaseClass>::StreamedfaceRecogHistory, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_faceRecogHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status faceRecogHistory(::grpc::ServerContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedfaceRecogHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::facerecog::faceRecogHistoryRequest,::facerecog::faceRecogHistoryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_faceRecogUpload<WithStreamedUnaryMethod_faceRecogRealtime<WithStreamedUnaryMethod_faceRecogHistory<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_faceRecogUpload<WithStreamedUnaryMethod_faceRecogRealtime<WithStreamedUnaryMethod_faceRecogHistory<Service > > > StreamedService;
};

}  // namespace facerecog


#endif  // GRPC_FaceRecogAPI_2eproto__INCLUDED
