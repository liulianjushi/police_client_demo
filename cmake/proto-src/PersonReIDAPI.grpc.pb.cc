// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PersonReIDAPI.proto

#include "PersonReIDAPI.pb.h"
#include "PersonReIDAPI.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace personreid {

static const char* PersonReIDAPI_method_names[] = {
  "/personreid.PersonReIDAPI/personReIDUpload",
  "/personreid.PersonReIDAPI/personReIDRealtime",
  "/personreid.PersonReIDAPI/personReIDHistory",
};

std::unique_ptr< PersonReIDAPI::Stub> PersonReIDAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PersonReIDAPI::Stub> stub(new PersonReIDAPI::Stub(channel));
  return stub;
}

PersonReIDAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_personReIDUpload_(PersonReIDAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_personReIDRealtime_(PersonReIDAPI_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_personReIDHistory_(PersonReIDAPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PersonReIDAPI::Stub::personReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::personreid::personReIDUploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_personReIDUpload_, context, request, response);
}

void PersonReIDAPI::Stub::experimental_async::personReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_personReIDUpload_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::personreid::personReIDUploadResponse>* PersonReIDAPI::Stub::AsyncpersonReIDUploadRaw(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::personreid::personReIDUploadResponse>::Create(channel_.get(), cq, rpcmethod_personReIDUpload_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::personreid::personReIDUploadResponse>* PersonReIDAPI::Stub::PrepareAsyncpersonReIDUploadRaw(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::personreid::personReIDUploadResponse>::Create(channel_.get(), cq, rpcmethod_personReIDUpload_, context, request, false);
}

::grpc::Status PersonReIDAPI::Stub::personReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::personreid::personReIDRealtimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_personReIDRealtime_, context, request, response);
}

void PersonReIDAPI::Stub::experimental_async::personReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_personReIDRealtime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::personreid::personReIDRealtimeResponse>* PersonReIDAPI::Stub::AsyncpersonReIDRealtimeRaw(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::personreid::personReIDRealtimeResponse>::Create(channel_.get(), cq, rpcmethod_personReIDRealtime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::personreid::personReIDRealtimeResponse>* PersonReIDAPI::Stub::PrepareAsyncpersonReIDRealtimeRaw(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::personreid::personReIDRealtimeResponse>::Create(channel_.get(), cq, rpcmethod_personReIDRealtime_, context, request, false);
}

::grpc::Status PersonReIDAPI::Stub::personReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::personreid::personReIDHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_personReIDHistory_, context, request, response);
}

void PersonReIDAPI::Stub::experimental_async::personReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_personReIDHistory_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::personreid::personReIDHistoryResponse>* PersonReIDAPI::Stub::AsyncpersonReIDHistoryRaw(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::personreid::personReIDHistoryResponse>::Create(channel_.get(), cq, rpcmethod_personReIDHistory_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::personreid::personReIDHistoryResponse>* PersonReIDAPI::Stub::PrepareAsyncpersonReIDHistoryRaw(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::personreid::personReIDHistoryResponse>::Create(channel_.get(), cq, rpcmethod_personReIDHistory_, context, request, false);
}

PersonReIDAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonReIDAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonReIDAPI::Service, ::personreid::personReIDUploadRequest, ::personreid::personReIDUploadResponse>(
          std::mem_fn(&PersonReIDAPI::Service::personReIDUpload), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonReIDAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonReIDAPI::Service, ::personreid::personReIDRealtimeRequest, ::personreid::personReIDRealtimeResponse>(
          std::mem_fn(&PersonReIDAPI::Service::personReIDRealtime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonReIDAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonReIDAPI::Service, ::personreid::personReIDHistoryRequest, ::personreid::personReIDHistoryResponse>(
          std::mem_fn(&PersonReIDAPI::Service::personReIDHistory), this)));
}

PersonReIDAPI::Service::~Service() {
}

::grpc::Status PersonReIDAPI::Service::personReIDUpload(::grpc::ServerContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonReIDAPI::Service::personReIDRealtime(::grpc::ServerContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonReIDAPI::Service::personReIDHistory(::grpc::ServerContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace personreid

