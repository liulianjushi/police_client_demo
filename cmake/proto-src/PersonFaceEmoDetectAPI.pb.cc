// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PersonFaceEmoDetectAPI.proto

#include "PersonFaceEmoDetectAPI.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace personfaceemodetect {
class personFaceEmoDetectRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<personFaceEmoDetectRequest>
      _instance;
} _personFaceEmoDetectRequest_default_instance_;
class personFaceEmoDetectResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<personFaceEmoDetectResponse>
      _instance;
} _personFaceEmoDetectResponse_default_instance_;
}  // namespace personfaceemodetect
namespace protobuf_PersonFaceEmoDetectAPI_2eproto {
static void InitDefaultspersonFaceEmoDetectRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::personfaceemodetect::_personFaceEmoDetectRequest_default_instance_;
    new (ptr) ::personfaceemodetect::personFaceEmoDetectRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::personfaceemodetect::personFaceEmoDetectRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_personFaceEmoDetectRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspersonFaceEmoDetectRequest}, {}};

static void InitDefaultspersonFaceEmoDetectResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::personfaceemodetect::_personFaceEmoDetectResponse_default_instance_;
    new (ptr) ::personfaceemodetect::personFaceEmoDetectResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::personfaceemodetect::personFaceEmoDetectResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_personFaceEmoDetectResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspersonFaceEmoDetectResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_personFaceEmoDetectRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_personFaceEmoDetectResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectRequest, rawdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectRequest, savepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectRequest, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectRequest, hight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectRequest, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectResponse, currentframesum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectResponse, totalpersonsum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::personfaceemodetect::personFaceEmoDetectResponse, abnormalnum_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::personfaceemodetect::personFaceEmoDetectRequest)},
  { 10, -1, sizeof(::personfaceemodetect::personFaceEmoDetectResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::personfaceemodetect::_personFaceEmoDetectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::personfaceemodetect::_personFaceEmoDetectResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "PersonFaceEmoDetectAPI.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034PersonFaceEmoDetectAPI.proto\022\023personfa"
      "ceemodetect\"n\n\032personFaceEmoDetectReques"
      "t\022\017\n\007rawData\030\001 \001(\014\022\020\n\010savePath\030\002 \001(\t\022\r\n\005"
      "Width\030\003 \001(\005\022\r\n\005Hight\030\004 \001(\005\022\017\n\007Channel\030\005 "
      "\001(\005\"c\n\033personFaceEmoDetectResponse\022\027\n\017cu"
      "rrentFrameSum\030\001 \001(\005\022\026\n\016totalPersonSum\030\002 "
      "\001(\005\022\023\n\013abnormalNum\030\003 \001(\0052\224\001\n\026PersonFaceE"
      "moDetectAPI\022z\n\023personFaceEmoDetect\022/.per"
      "sonfaceemodetect.personFaceEmoDetectRequ"
      "est\0320.personfaceemodetect.personFaceEmoD"
      "etectResponse\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PersonFaceEmoDetectAPI.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_PersonFaceEmoDetectAPI_2eproto
namespace personfaceemodetect {

// ===================================================================

void personFaceEmoDetectRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int personFaceEmoDetectRequest::kRawDataFieldNumber;
const int personFaceEmoDetectRequest::kSavePathFieldNumber;
const int personFaceEmoDetectRequest::kWidthFieldNumber;
const int personFaceEmoDetectRequest::kHightFieldNumber;
const int personFaceEmoDetectRequest::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

personFaceEmoDetectRequest::personFaceEmoDetectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PersonFaceEmoDetectAPI_2eproto::scc_info_personFaceEmoDetectRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:personfaceemodetect.personFaceEmoDetectRequest)
}
personFaceEmoDetectRequest::personFaceEmoDetectRequest(const personFaceEmoDetectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rawdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rawdata().size() > 0) {
    rawdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
  }
  savepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.savepath().size() > 0) {
    savepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.savepath_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:personfaceemodetect.personFaceEmoDetectRequest)
}

void personFaceEmoDetectRequest::SharedCtor() {
  rawdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  savepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
}

personFaceEmoDetectRequest::~personFaceEmoDetectRequest() {
  // @@protoc_insertion_point(destructor:personfaceemodetect.personFaceEmoDetectRequest)
  SharedDtor();
}

void personFaceEmoDetectRequest::SharedDtor() {
  rawdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  savepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void personFaceEmoDetectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* personFaceEmoDetectRequest::descriptor() {
  ::protobuf_PersonFaceEmoDetectAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PersonFaceEmoDetectAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const personFaceEmoDetectRequest& personFaceEmoDetectRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PersonFaceEmoDetectAPI_2eproto::scc_info_personFaceEmoDetectRequest.base);
  return *internal_default_instance();
}


void personFaceEmoDetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:personfaceemodetect.personFaceEmoDetectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  savepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&width_)) + sizeof(channel_));
  _internal_metadata_.Clear();
}

bool personFaceEmoDetectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personfaceemodetect.personFaceEmoDetectRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes rawData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rawdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string savePath = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_savepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->savepath().data(), static_cast<int>(this->savepath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "personfaceemodetect.personFaceEmoDetectRequest.savePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Hight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Channel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personfaceemodetect.personFaceEmoDetectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personfaceemodetect.personFaceEmoDetectRequest)
  return false;
#undef DO_
}

void personFaceEmoDetectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personfaceemodetect.personFaceEmoDetectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rawData = 1;
  if (this->rawdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->rawdata(), output);
  }

  // string savePath = 2;
  if (this->savepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->savepath().data(), static_cast<int>(this->savepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personfaceemodetect.personFaceEmoDetectRequest.savePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->savepath(), output);
  }

  // int32 Width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 Hight = 4;
  if (this->hight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hight(), output);
  }

  // int32 Channel = 5;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:personfaceemodetect.personFaceEmoDetectRequest)
}

::google::protobuf::uint8* personFaceEmoDetectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personfaceemodetect.personFaceEmoDetectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rawData = 1;
  if (this->rawdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rawdata(), target);
  }

  // string savePath = 2;
  if (this->savepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->savepath().data(), static_cast<int>(this->savepath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "personfaceemodetect.personFaceEmoDetectRequest.savePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->savepath(), target);
  }

  // int32 Width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // int32 Hight = 4;
  if (this->hight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hight(), target);
  }

  // int32 Channel = 5;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:personfaceemodetect.personFaceEmoDetectRequest)
  return target;
}

size_t personFaceEmoDetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personfaceemodetect.personFaceEmoDetectRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes rawData = 1;
  if (this->rawdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rawdata());
  }

  // string savePath = 2;
  if (this->savepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->savepath());
  }

  // int32 Width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 Hight = 4;
  if (this->hight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hight());
  }

  // int32 Channel = 5;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void personFaceEmoDetectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personfaceemodetect.personFaceEmoDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const personFaceEmoDetectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const personFaceEmoDetectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personfaceemodetect.personFaceEmoDetectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personfaceemodetect.personFaceEmoDetectRequest)
    MergeFrom(*source);
  }
}

void personFaceEmoDetectRequest::MergeFrom(const personFaceEmoDetectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personfaceemodetect.personFaceEmoDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rawdata().size() > 0) {

    rawdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rawdata_);
  }
  if (from.savepath().size() > 0) {

    savepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.savepath_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.hight() != 0) {
    set_hight(from.hight());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void personFaceEmoDetectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personfaceemodetect.personFaceEmoDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void personFaceEmoDetectRequest::CopyFrom(const personFaceEmoDetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personfaceemodetect.personFaceEmoDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool personFaceEmoDetectRequest::IsInitialized() const {
  return true;
}

void personFaceEmoDetectRequest::Swap(personFaceEmoDetectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void personFaceEmoDetectRequest::InternalSwap(personFaceEmoDetectRequest* other) {
  using std::swap;
  rawdata_.Swap(&other->rawdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  savepath_.Swap(&other->savepath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(hight_, other->hight_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata personFaceEmoDetectRequest::GetMetadata() const {
  protobuf_PersonFaceEmoDetectAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PersonFaceEmoDetectAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void personFaceEmoDetectResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int personFaceEmoDetectResponse::kCurrentFrameSumFieldNumber;
const int personFaceEmoDetectResponse::kTotalPersonSumFieldNumber;
const int personFaceEmoDetectResponse::kAbnormalNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

personFaceEmoDetectResponse::personFaceEmoDetectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PersonFaceEmoDetectAPI_2eproto::scc_info_personFaceEmoDetectResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:personfaceemodetect.personFaceEmoDetectResponse)
}
personFaceEmoDetectResponse::personFaceEmoDetectResponse(const personFaceEmoDetectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentframesum_, &from.currentframesum_,
    static_cast<size_t>(reinterpret_cast<char*>(&abnormalnum_) -
    reinterpret_cast<char*>(&currentframesum_)) + sizeof(abnormalnum_));
  // @@protoc_insertion_point(copy_constructor:personfaceemodetect.personFaceEmoDetectResponse)
}

void personFaceEmoDetectResponse::SharedCtor() {
  ::memset(&currentframesum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abnormalnum_) -
      reinterpret_cast<char*>(&currentframesum_)) + sizeof(abnormalnum_));
}

personFaceEmoDetectResponse::~personFaceEmoDetectResponse() {
  // @@protoc_insertion_point(destructor:personfaceemodetect.personFaceEmoDetectResponse)
  SharedDtor();
}

void personFaceEmoDetectResponse::SharedDtor() {
}

void personFaceEmoDetectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* personFaceEmoDetectResponse::descriptor() {
  ::protobuf_PersonFaceEmoDetectAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PersonFaceEmoDetectAPI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const personFaceEmoDetectResponse& personFaceEmoDetectResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PersonFaceEmoDetectAPI_2eproto::scc_info_personFaceEmoDetectResponse.base);
  return *internal_default_instance();
}


void personFaceEmoDetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:personfaceemodetect.personFaceEmoDetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currentframesum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abnormalnum_) -
      reinterpret_cast<char*>(&currentframesum_)) + sizeof(abnormalnum_));
  _internal_metadata_.Clear();
}

bool personFaceEmoDetectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:personfaceemodetect.personFaceEmoDetectResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 currentFrameSum = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentframesum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 totalPersonSum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalpersonsum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 abnormalNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abnormalnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:personfaceemodetect.personFaceEmoDetectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:personfaceemodetect.personFaceEmoDetectResponse)
  return false;
#undef DO_
}

void personFaceEmoDetectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:personfaceemodetect.personFaceEmoDetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 currentFrameSum = 1;
  if (this->currentframesum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currentframesum(), output);
  }

  // int32 totalPersonSum = 2;
  if (this->totalpersonsum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalpersonsum(), output);
  }

  // int32 abnormalNum = 3;
  if (this->abnormalnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->abnormalnum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:personfaceemodetect.personFaceEmoDetectResponse)
}

::google::protobuf::uint8* personFaceEmoDetectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:personfaceemodetect.personFaceEmoDetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 currentFrameSum = 1;
  if (this->currentframesum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currentframesum(), target);
  }

  // int32 totalPersonSum = 2;
  if (this->totalpersonsum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalpersonsum(), target);
  }

  // int32 abnormalNum = 3;
  if (this->abnormalnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->abnormalnum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:personfaceemodetect.personFaceEmoDetectResponse)
  return target;
}

size_t personFaceEmoDetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personfaceemodetect.personFaceEmoDetectResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 currentFrameSum = 1;
  if (this->currentframesum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currentframesum());
  }

  // int32 totalPersonSum = 2;
  if (this->totalpersonsum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalpersonsum());
  }

  // int32 abnormalNum = 3;
  if (this->abnormalnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->abnormalnum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void personFaceEmoDetectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:personfaceemodetect.personFaceEmoDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const personFaceEmoDetectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const personFaceEmoDetectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:personfaceemodetect.personFaceEmoDetectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:personfaceemodetect.personFaceEmoDetectResponse)
    MergeFrom(*source);
  }
}

void personFaceEmoDetectResponse::MergeFrom(const personFaceEmoDetectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personfaceemodetect.personFaceEmoDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currentframesum() != 0) {
    set_currentframesum(from.currentframesum());
  }
  if (from.totalpersonsum() != 0) {
    set_totalpersonsum(from.totalpersonsum());
  }
  if (from.abnormalnum() != 0) {
    set_abnormalnum(from.abnormalnum());
  }
}

void personFaceEmoDetectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:personfaceemodetect.personFaceEmoDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void personFaceEmoDetectResponse::CopyFrom(const personFaceEmoDetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personfaceemodetect.personFaceEmoDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool personFaceEmoDetectResponse::IsInitialized() const {
  return true;
}

void personFaceEmoDetectResponse::Swap(personFaceEmoDetectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void personFaceEmoDetectResponse::InternalSwap(personFaceEmoDetectResponse* other) {
  using std::swap;
  swap(currentframesum_, other->currentframesum_);
  swap(totalpersonsum_, other->totalpersonsum_);
  swap(abnormalnum_, other->abnormalnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata personFaceEmoDetectResponse::GetMetadata() const {
  protobuf_PersonFaceEmoDetectAPI_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PersonFaceEmoDetectAPI_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace personfaceemodetect
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::personfaceemodetect::personFaceEmoDetectRequest* Arena::CreateMaybeMessage< ::personfaceemodetect::personFaceEmoDetectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::personfaceemodetect::personFaceEmoDetectRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::personfaceemodetect::personFaceEmoDetectResponse* Arena::CreateMaybeMessage< ::personfaceemodetect::personFaceEmoDetectResponse >(Arena* arena) {
  return Arena::CreateInternal< ::personfaceemodetect::personFaceEmoDetectResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
