// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PersonReIDAPI.proto
#ifndef GRPC_PersonReIDAPI_2eproto__INCLUDED
#define GRPC_PersonReIDAPI_2eproto__INCLUDED

#include "PersonReIDAPI.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace personreid {

class PersonReIDAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "personreid.PersonReIDAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status personReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::personreid::personReIDUploadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDUploadResponse>> AsyncpersonReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDUploadResponse>>(AsyncpersonReIDUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDUploadResponse>> PrepareAsyncpersonReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDUploadResponse>>(PrepareAsyncpersonReIDUploadRaw(context, request, cq));
    }
    virtual ::grpc::Status personReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::personreid::personReIDRealtimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDRealtimeResponse>> AsyncpersonReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDRealtimeResponse>>(AsyncpersonReIDRealtimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDRealtimeResponse>> PrepareAsyncpersonReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDRealtimeResponse>>(PrepareAsyncpersonReIDRealtimeRaw(context, request, cq));
    }
    virtual ::grpc::Status personReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::personreid::personReIDHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDHistoryResponse>> AsyncpersonReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDHistoryResponse>>(AsyncpersonReIDHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDHistoryResponse>> PrepareAsyncpersonReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDHistoryResponse>>(PrepareAsyncpersonReIDHistoryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void personReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void personReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void personReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDUploadResponse>* AsyncpersonReIDUploadRaw(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDUploadResponse>* PrepareAsyncpersonReIDUploadRaw(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDRealtimeResponse>* AsyncpersonReIDRealtimeRaw(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDRealtimeResponse>* PrepareAsyncpersonReIDRealtimeRaw(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDHistoryResponse>* AsyncpersonReIDHistoryRaw(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::personreid::personReIDHistoryResponse>* PrepareAsyncpersonReIDHistoryRaw(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status personReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::personreid::personReIDUploadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDUploadResponse>> AsyncpersonReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDUploadResponse>>(AsyncpersonReIDUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDUploadResponse>> PrepareAsyncpersonReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDUploadResponse>>(PrepareAsyncpersonReIDUploadRaw(context, request, cq));
    }
    ::grpc::Status personReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::personreid::personReIDRealtimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDRealtimeResponse>> AsyncpersonReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDRealtimeResponse>>(AsyncpersonReIDRealtimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDRealtimeResponse>> PrepareAsyncpersonReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDRealtimeResponse>>(PrepareAsyncpersonReIDRealtimeRaw(context, request, cq));
    }
    ::grpc::Status personReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::personreid::personReIDHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDHistoryResponse>> AsyncpersonReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDHistoryResponse>>(AsyncpersonReIDHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDHistoryResponse>> PrepareAsyncpersonReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::personreid::personReIDHistoryResponse>>(PrepareAsyncpersonReIDHistoryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void personReIDUpload(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response, std::function<void(::grpc::Status)>) override;
      void personReIDRealtime(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response, std::function<void(::grpc::Status)>) override;
      void personReIDHistory(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::personreid::personReIDUploadResponse>* AsyncpersonReIDUploadRaw(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::personreid::personReIDUploadResponse>* PrepareAsyncpersonReIDUploadRaw(::grpc::ClientContext* context, const ::personreid::personReIDUploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::personreid::personReIDRealtimeResponse>* AsyncpersonReIDRealtimeRaw(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::personreid::personReIDRealtimeResponse>* PrepareAsyncpersonReIDRealtimeRaw(::grpc::ClientContext* context, const ::personreid::personReIDRealtimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::personreid::personReIDHistoryResponse>* AsyncpersonReIDHistoryRaw(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::personreid::personReIDHistoryResponse>* PrepareAsyncpersonReIDHistoryRaw(::grpc::ClientContext* context, const ::personreid::personReIDHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_personReIDUpload_;
    const ::grpc::internal::RpcMethod rpcmethod_personReIDRealtime_;
    const ::grpc::internal::RpcMethod rpcmethod_personReIDHistory_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status personReIDUpload(::grpc::ServerContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response);
    virtual ::grpc::Status personReIDRealtime(::grpc::ServerContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response);
    virtual ::grpc::Status personReIDHistory(::grpc::ServerContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_personReIDUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_personReIDUpload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_personReIDUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDUpload(::grpc::ServerContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpersonReIDUpload(::grpc::ServerContext* context, ::personreid::personReIDUploadRequest* request, ::grpc::ServerAsyncResponseWriter< ::personreid::personReIDUploadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_personReIDRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_personReIDRealtime() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_personReIDRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDRealtime(::grpc::ServerContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpersonReIDRealtime(::grpc::ServerContext* context, ::personreid::personReIDRealtimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::personreid::personReIDRealtimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_personReIDHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_personReIDHistory() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_personReIDHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDHistory(::grpc::ServerContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpersonReIDHistory(::grpc::ServerContext* context, ::personreid::personReIDHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::personreid::personReIDHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_personReIDUpload<WithAsyncMethod_personReIDRealtime<WithAsyncMethod_personReIDHistory<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_personReIDUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_personReIDUpload() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_personReIDUpload<BaseClass>, ::personreid::personReIDUploadRequest, ::personreid::personReIDUploadResponse>(
          [this](::grpc::ServerContext* context,
                 const ::personreid::personReIDUploadRequest* request,
                 ::personreid::personReIDUploadResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->personReIDUpload(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_personReIDUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDUpload(::grpc::ServerContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void personReIDUpload(::grpc::ServerContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_personReIDRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_personReIDRealtime() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_personReIDRealtime<BaseClass>, ::personreid::personReIDRealtimeRequest, ::personreid::personReIDRealtimeResponse>(
          [this](::grpc::ServerContext* context,
                 const ::personreid::personReIDRealtimeRequest* request,
                 ::personreid::personReIDRealtimeResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->personReIDRealtime(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_personReIDRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDRealtime(::grpc::ServerContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void personReIDRealtime(::grpc::ServerContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_personReIDHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_personReIDHistory() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_personReIDHistory<BaseClass>, ::personreid::personReIDHistoryRequest, ::personreid::personReIDHistoryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::personreid::personReIDHistoryRequest* request,
                 ::personreid::personReIDHistoryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->personReIDHistory(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_personReIDHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDHistory(::grpc::ServerContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void personReIDHistory(::grpc::ServerContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_personReIDUpload<ExperimentalWithCallbackMethod_personReIDRealtime<ExperimentalWithCallbackMethod_personReIDHistory<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_personReIDUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_personReIDUpload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_personReIDUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDUpload(::grpc::ServerContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_personReIDRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_personReIDRealtime() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_personReIDRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDRealtime(::grpc::ServerContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_personReIDHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_personReIDHistory() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_personReIDHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDHistory(::grpc::ServerContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_personReIDUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_personReIDUpload() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_personReIDUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDUpload(::grpc::ServerContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpersonReIDUpload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_personReIDRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_personReIDRealtime() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_personReIDRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDRealtime(::grpc::ServerContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpersonReIDRealtime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_personReIDHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_personReIDHistory() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_personReIDHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDHistory(::grpc::ServerContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpersonReIDHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_personReIDUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_personReIDUpload() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_personReIDUpload<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->personReIDUpload(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_personReIDUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDUpload(::grpc::ServerContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void personReIDUpload(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_personReIDRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_personReIDRealtime() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_personReIDRealtime<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->personReIDRealtime(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_personReIDRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDRealtime(::grpc::ServerContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void personReIDRealtime(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_personReIDHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_personReIDHistory() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_personReIDHistory<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->personReIDHistory(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_personReIDHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status personReIDHistory(::grpc::ServerContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void personReIDHistory(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_personReIDUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_personReIDUpload() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::personreid::personReIDUploadRequest, ::personreid::personReIDUploadResponse>(std::bind(&WithStreamedUnaryMethod_personReIDUpload<BaseClass>::StreamedpersonReIDUpload, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_personReIDUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status personReIDUpload(::grpc::ServerContext* context, const ::personreid::personReIDUploadRequest* request, ::personreid::personReIDUploadResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpersonReIDUpload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::personreid::personReIDUploadRequest,::personreid::personReIDUploadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_personReIDRealtime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_personReIDRealtime() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::personreid::personReIDRealtimeRequest, ::personreid::personReIDRealtimeResponse>(std::bind(&WithStreamedUnaryMethod_personReIDRealtime<BaseClass>::StreamedpersonReIDRealtime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_personReIDRealtime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status personReIDRealtime(::grpc::ServerContext* context, const ::personreid::personReIDRealtimeRequest* request, ::personreid::personReIDRealtimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpersonReIDRealtime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::personreid::personReIDRealtimeRequest,::personreid::personReIDRealtimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_personReIDHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_personReIDHistory() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::personreid::personReIDHistoryRequest, ::personreid::personReIDHistoryResponse>(std::bind(&WithStreamedUnaryMethod_personReIDHistory<BaseClass>::StreamedpersonReIDHistory, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_personReIDHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status personReIDHistory(::grpc::ServerContext* context, const ::personreid::personReIDHistoryRequest* request, ::personreid::personReIDHistoryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpersonReIDHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::personreid::personReIDHistoryRequest,::personreid::personReIDHistoryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_personReIDUpload<WithStreamedUnaryMethod_personReIDRealtime<WithStreamedUnaryMethod_personReIDHistory<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_personReIDUpload<WithStreamedUnaryMethod_personReIDRealtime<WithStreamedUnaryMethod_personReIDHistory<Service > > > StreamedService;
};

}  // namespace personreid


#endif  // GRPC_PersonReIDAPI_2eproto__INCLUDED
