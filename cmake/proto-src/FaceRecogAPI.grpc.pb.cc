// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FaceRecogAPI.proto

#include "FaceRecogAPI.pb.h"
#include "FaceRecogAPI.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace facerecog {

static const char* FaceRecogAPI_method_names[] = {
  "/facerecog.FaceRecogAPI/faceRecogUpload",
  "/facerecog.FaceRecogAPI/faceRecogRealtime",
  "/facerecog.FaceRecogAPI/faceRecogHistory",
};

std::unique_ptr< FaceRecogAPI::Stub> FaceRecogAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FaceRecogAPI::Stub> stub(new FaceRecogAPI::Stub(channel));
  return stub;
}

FaceRecogAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_faceRecogUpload_(FaceRecogAPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_faceRecogRealtime_(FaceRecogAPI_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_faceRecogHistory_(FaceRecogAPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FaceRecogAPI::Stub::faceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::facerecog::faceRecogUploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_faceRecogUpload_, context, request, response);
}

void FaceRecogAPI::Stub::experimental_async::faceRecogUpload(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_faceRecogUpload_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogUploadResponse>* FaceRecogAPI::Stub::AsyncfaceRecogUploadRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::facerecog::faceRecogUploadResponse>::Create(channel_.get(), cq, rpcmethod_faceRecogUpload_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogUploadResponse>* FaceRecogAPI::Stub::PrepareAsyncfaceRecogUploadRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogUploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::facerecog::faceRecogUploadResponse>::Create(channel_.get(), cq, rpcmethod_faceRecogUpload_, context, request, false);
}

::grpc::Status FaceRecogAPI::Stub::faceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::facerecog::faceRecogRealtimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_faceRecogRealtime_, context, request, response);
}

void FaceRecogAPI::Stub::experimental_async::faceRecogRealtime(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_faceRecogRealtime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogRealtimeResponse>* FaceRecogAPI::Stub::AsyncfaceRecogRealtimeRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::facerecog::faceRecogRealtimeResponse>::Create(channel_.get(), cq, rpcmethod_faceRecogRealtime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogRealtimeResponse>* FaceRecogAPI::Stub::PrepareAsyncfaceRecogRealtimeRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogRealtimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::facerecog::faceRecogRealtimeResponse>::Create(channel_.get(), cq, rpcmethod_faceRecogRealtime_, context, request, false);
}

::grpc::Status FaceRecogAPI::Stub::faceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::facerecog::faceRecogHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_faceRecogHistory_, context, request, response);
}

void FaceRecogAPI::Stub::experimental_async::faceRecogHistory(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_faceRecogHistory_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogHistoryResponse>* FaceRecogAPI::Stub::AsyncfaceRecogHistoryRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::facerecog::faceRecogHistoryResponse>::Create(channel_.get(), cq, rpcmethod_faceRecogHistory_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::facerecog::faceRecogHistoryResponse>* FaceRecogAPI::Stub::PrepareAsyncfaceRecogHistoryRaw(::grpc::ClientContext* context, const ::facerecog::faceRecogHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::facerecog::faceRecogHistoryResponse>::Create(channel_.get(), cq, rpcmethod_faceRecogHistory_, context, request, false);
}

FaceRecogAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecogAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecogAPI::Service, ::facerecog::faceRecogUploadRequest, ::facerecog::faceRecogUploadResponse>(
          std::mem_fn(&FaceRecogAPI::Service::faceRecogUpload), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecogAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecogAPI::Service, ::facerecog::faceRecogRealtimeRequest, ::facerecog::faceRecogRealtimeResponse>(
          std::mem_fn(&FaceRecogAPI::Service::faceRecogRealtime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceRecogAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceRecogAPI::Service, ::facerecog::faceRecogHistoryRequest, ::facerecog::faceRecogHistoryResponse>(
          std::mem_fn(&FaceRecogAPI::Service::faceRecogHistory), this)));
}

FaceRecogAPI::Service::~Service() {
}

::grpc::Status FaceRecogAPI::Service::faceRecogUpload(::grpc::ServerContext* context, const ::facerecog::faceRecogUploadRequest* request, ::facerecog::faceRecogUploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecogAPI::Service::faceRecogRealtime(::grpc::ServerContext* context, const ::facerecog::faceRecogRealtimeRequest* request, ::facerecog::faceRecogRealtimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceRecogAPI::Service::faceRecogHistory(::grpc::ServerContext* context, const ::facerecog::faceRecogHistoryRequest* request, ::facerecog::faceRecogHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace facerecog

