// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FaceRecogAPI.proto

#ifndef PROTOBUF_INCLUDED_FaceRecogAPI_2eproto
#define PROTOBUF_INCLUDED_FaceRecogAPI_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_FaceRecogAPI_2eproto 

namespace protobuf_FaceRecogAPI_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_FaceRecogAPI_2eproto
namespace facerecog {
class faceRecogHistoryRequest;
class faceRecogHistoryRequestDefaultTypeInternal;
extern faceRecogHistoryRequestDefaultTypeInternal _faceRecogHistoryRequest_default_instance_;
class faceRecogHistoryResponse;
class faceRecogHistoryResponseDefaultTypeInternal;
extern faceRecogHistoryResponseDefaultTypeInternal _faceRecogHistoryResponse_default_instance_;
class faceRecogRealtimeRequest;
class faceRecogRealtimeRequestDefaultTypeInternal;
extern faceRecogRealtimeRequestDefaultTypeInternal _faceRecogRealtimeRequest_default_instance_;
class faceRecogRealtimeResponse;
class faceRecogRealtimeResponseDefaultTypeInternal;
extern faceRecogRealtimeResponseDefaultTypeInternal _faceRecogRealtimeResponse_default_instance_;
class faceRecogUploadRequest;
class faceRecogUploadRequestDefaultTypeInternal;
extern faceRecogUploadRequestDefaultTypeInternal _faceRecogUploadRequest_default_instance_;
class faceRecogUploadResponse;
class faceRecogUploadResponseDefaultTypeInternal;
extern faceRecogUploadResponseDefaultTypeInternal _faceRecogUploadResponse_default_instance_;
}  // namespace facerecog
namespace google {
namespace protobuf {
template<> ::facerecog::faceRecogHistoryRequest* Arena::CreateMaybeMessage<::facerecog::faceRecogHistoryRequest>(Arena*);
template<> ::facerecog::faceRecogHistoryResponse* Arena::CreateMaybeMessage<::facerecog::faceRecogHistoryResponse>(Arena*);
template<> ::facerecog::faceRecogRealtimeRequest* Arena::CreateMaybeMessage<::facerecog::faceRecogRealtimeRequest>(Arena*);
template<> ::facerecog::faceRecogRealtimeResponse* Arena::CreateMaybeMessage<::facerecog::faceRecogRealtimeResponse>(Arena*);
template<> ::facerecog::faceRecogUploadRequest* Arena::CreateMaybeMessage<::facerecog::faceRecogUploadRequest>(Arena*);
template<> ::facerecog::faceRecogUploadResponse* Arena::CreateMaybeMessage<::facerecog::faceRecogUploadResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace facerecog {

// ===================================================================

class faceRecogUploadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:facerecog.faceRecogUploadRequest) */ {
 public:
  faceRecogUploadRequest();
  virtual ~faceRecogUploadRequest();

  faceRecogUploadRequest(const faceRecogUploadRequest& from);

  inline faceRecogUploadRequest& operator=(const faceRecogUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  faceRecogUploadRequest(faceRecogUploadRequest&& from) noexcept
    : faceRecogUploadRequest() {
    *this = ::std::move(from);
  }

  inline faceRecogUploadRequest& operator=(faceRecogUploadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const faceRecogUploadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const faceRecogUploadRequest* internal_default_instance() {
    return reinterpret_cast<const faceRecogUploadRequest*>(
               &_faceRecogUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(faceRecogUploadRequest* other);
  friend void swap(faceRecogUploadRequest& a, faceRecogUploadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline faceRecogUploadRequest* New() const final {
    return CreateMaybeMessage<faceRecogUploadRequest>(NULL);
  }

  faceRecogUploadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<faceRecogUploadRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const faceRecogUploadRequest& from);
  void MergeFrom(const faceRecogUploadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(faceRecogUploadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes rawData = 1;
  void clear_rawdata();
  static const int kRawDataFieldNumber = 1;
  const ::std::string& rawdata() const;
  void set_rawdata(const ::std::string& value);
  #if LANG_CXX11
  void set_rawdata(::std::string&& value);
  #endif
  void set_rawdata(const char* value);
  void set_rawdata(const void* value, size_t size);
  ::std::string* mutable_rawdata();
  ::std::string* release_rawdata();
  void set_allocated_rawdata(::std::string* rawdata);

  // int32 Width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 Hight = 3;
  void clear_hight();
  static const int kHightFieldNumber = 3;
  ::google::protobuf::int32 hight() const;
  void set_hight(::google::protobuf::int32 value);

  // int32 Channel = 4;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:facerecog.faceRecogUploadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rawdata_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 hight_;
  ::google::protobuf::int32 channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FaceRecogAPI_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class faceRecogUploadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:facerecog.faceRecogUploadResponse) */ {
 public:
  faceRecogUploadResponse();
  virtual ~faceRecogUploadResponse();

  faceRecogUploadResponse(const faceRecogUploadResponse& from);

  inline faceRecogUploadResponse& operator=(const faceRecogUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  faceRecogUploadResponse(faceRecogUploadResponse&& from) noexcept
    : faceRecogUploadResponse() {
    *this = ::std::move(from);
  }

  inline faceRecogUploadResponse& operator=(faceRecogUploadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const faceRecogUploadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const faceRecogUploadResponse* internal_default_instance() {
    return reinterpret_cast<const faceRecogUploadResponse*>(
               &_faceRecogUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(faceRecogUploadResponse* other);
  friend void swap(faceRecogUploadResponse& a, faceRecogUploadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline faceRecogUploadResponse* New() const final {
    return CreateMaybeMessage<faceRecogUploadResponse>(NULL);
  }

  faceRecogUploadResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<faceRecogUploadResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const faceRecogUploadResponse& from);
  void MergeFrom(const faceRecogUploadResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(faceRecogUploadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:facerecog.faceRecogUploadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FaceRecogAPI_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class faceRecogRealtimeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:facerecog.faceRecogRealtimeRequest) */ {
 public:
  faceRecogRealtimeRequest();
  virtual ~faceRecogRealtimeRequest();

  faceRecogRealtimeRequest(const faceRecogRealtimeRequest& from);

  inline faceRecogRealtimeRequest& operator=(const faceRecogRealtimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  faceRecogRealtimeRequest(faceRecogRealtimeRequest&& from) noexcept
    : faceRecogRealtimeRequest() {
    *this = ::std::move(from);
  }

  inline faceRecogRealtimeRequest& operator=(faceRecogRealtimeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const faceRecogRealtimeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const faceRecogRealtimeRequest* internal_default_instance() {
    return reinterpret_cast<const faceRecogRealtimeRequest*>(
               &_faceRecogRealtimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(faceRecogRealtimeRequest* other);
  friend void swap(faceRecogRealtimeRequest& a, faceRecogRealtimeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline faceRecogRealtimeRequest* New() const final {
    return CreateMaybeMessage<faceRecogRealtimeRequest>(NULL);
  }

  faceRecogRealtimeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<faceRecogRealtimeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const faceRecogRealtimeRequest& from);
  void MergeFrom(const faceRecogRealtimeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(faceRecogRealtimeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes rawData = 1;
  void clear_rawdata();
  static const int kRawDataFieldNumber = 1;
  const ::std::string& rawdata() const;
  void set_rawdata(const ::std::string& value);
  #if LANG_CXX11
  void set_rawdata(::std::string&& value);
  #endif
  void set_rawdata(const char* value);
  void set_rawdata(const void* value, size_t size);
  ::std::string* mutable_rawdata();
  ::std::string* release_rawdata();
  void set_allocated_rawdata(::std::string* rawdata);

  // int32 Width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 Hight = 3;
  void clear_hight();
  static const int kHightFieldNumber = 3;
  ::google::protobuf::int32 hight() const;
  void set_hight(::google::protobuf::int32 value);

  // int32 Channel = 4;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:facerecog.faceRecogRealtimeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rawdata_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 hight_;
  ::google::protobuf::int32 channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FaceRecogAPI_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class faceRecogRealtimeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:facerecog.faceRecogRealtimeResponse) */ {
 public:
  faceRecogRealtimeResponse();
  virtual ~faceRecogRealtimeResponse();

  faceRecogRealtimeResponse(const faceRecogRealtimeResponse& from);

  inline faceRecogRealtimeResponse& operator=(const faceRecogRealtimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  faceRecogRealtimeResponse(faceRecogRealtimeResponse&& from) noexcept
    : faceRecogRealtimeResponse() {
    *this = ::std::move(from);
  }

  inline faceRecogRealtimeResponse& operator=(faceRecogRealtimeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const faceRecogRealtimeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const faceRecogRealtimeResponse* internal_default_instance() {
    return reinterpret_cast<const faceRecogRealtimeResponse*>(
               &_faceRecogRealtimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(faceRecogRealtimeResponse* other);
  friend void swap(faceRecogRealtimeResponse& a, faceRecogRealtimeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline faceRecogRealtimeResponse* New() const final {
    return CreateMaybeMessage<faceRecogRealtimeResponse>(NULL);
  }

  faceRecogRealtimeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<faceRecogRealtimeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const faceRecogRealtimeResponse& from);
  void MergeFrom(const faceRecogRealtimeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(faceRecogRealtimeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 status = 1;
  int status_size() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status(int index) const;
  void set_status(int index, ::google::protobuf::int32 value);
  void add_status(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      status() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_status();

  // repeated .common.BoundingBox faceRect = 2;
  int facerect_size() const;
  void clear_facerect();
  static const int kFaceRectFieldNumber = 2;
  ::common::BoundingBox* mutable_facerect(int index);
  ::google::protobuf::RepeatedPtrField< ::common::BoundingBox >*
      mutable_facerect();
  const ::common::BoundingBox& facerect(int index) const;
  ::common::BoundingBox* add_facerect();
  const ::google::protobuf::RepeatedPtrField< ::common::BoundingBox >&
      facerect() const;

  // @@protoc_insertion_point(class_scope:facerecog.faceRecogRealtimeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > status_;
  mutable int _status_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::common::BoundingBox > facerect_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FaceRecogAPI_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class faceRecogHistoryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:facerecog.faceRecogHistoryRequest) */ {
 public:
  faceRecogHistoryRequest();
  virtual ~faceRecogHistoryRequest();

  faceRecogHistoryRequest(const faceRecogHistoryRequest& from);

  inline faceRecogHistoryRequest& operator=(const faceRecogHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  faceRecogHistoryRequest(faceRecogHistoryRequest&& from) noexcept
    : faceRecogHistoryRequest() {
    *this = ::std::move(from);
  }

  inline faceRecogHistoryRequest& operator=(faceRecogHistoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const faceRecogHistoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const faceRecogHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const faceRecogHistoryRequest*>(
               &_faceRecogHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(faceRecogHistoryRequest* other);
  friend void swap(faceRecogHistoryRequest& a, faceRecogHistoryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline faceRecogHistoryRequest* New() const final {
    return CreateMaybeMessage<faceRecogHistoryRequest>(NULL);
  }

  faceRecogHistoryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<faceRecogHistoryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const faceRecogHistoryRequest& from);
  void MergeFrom(const faceRecogHistoryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(faceRecogHistoryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string imagePath = 1;
  int imagepath_size() const;
  void clear_imagepath();
  static const int kImagePathFieldNumber = 1;
  const ::std::string& imagepath(int index) const;
  ::std::string* mutable_imagepath(int index);
  void set_imagepath(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_imagepath(int index, ::std::string&& value);
  #endif
  void set_imagepath(int index, const char* value);
  void set_imagepath(int index, const char* value, size_t size);
  ::std::string* add_imagepath();
  void add_imagepath(const ::std::string& value);
  #if LANG_CXX11
  void add_imagepath(::std::string&& value);
  #endif
  void add_imagepath(const char* value);
  void add_imagepath(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& imagepath() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_imagepath();

  // @@protoc_insertion_point(class_scope:facerecog.faceRecogHistoryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> imagepath_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FaceRecogAPI_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class faceRecogHistoryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:facerecog.faceRecogHistoryResponse) */ {
 public:
  faceRecogHistoryResponse();
  virtual ~faceRecogHistoryResponse();

  faceRecogHistoryResponse(const faceRecogHistoryResponse& from);

  inline faceRecogHistoryResponse& operator=(const faceRecogHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  faceRecogHistoryResponse(faceRecogHistoryResponse&& from) noexcept
    : faceRecogHistoryResponse() {
    *this = ::std::move(from);
  }

  inline faceRecogHistoryResponse& operator=(faceRecogHistoryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const faceRecogHistoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const faceRecogHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const faceRecogHistoryResponse*>(
               &_faceRecogHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(faceRecogHistoryResponse* other);
  friend void swap(faceRecogHistoryResponse& a, faceRecogHistoryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline faceRecogHistoryResponse* New() const final {
    return CreateMaybeMessage<faceRecogHistoryResponse>(NULL);
  }

  faceRecogHistoryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<faceRecogHistoryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const faceRecogHistoryResponse& from);
  void MergeFrom(const faceRecogHistoryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(faceRecogHistoryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 index = 1;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index(int index) const;
  void set_index(int index, ::google::protobuf::int32 value);
  void add_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:facerecog.faceRecogHistoryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > index_;
  mutable int _index_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FaceRecogAPI_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// faceRecogUploadRequest

// bytes rawData = 1;
inline void faceRecogUploadRequest::clear_rawdata() {
  rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& faceRecogUploadRequest::rawdata() const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogUploadRequest.rawData)
  return rawdata_.GetNoArena();
}
inline void faceRecogUploadRequest::set_rawdata(const ::std::string& value) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:facerecog.faceRecogUploadRequest.rawData)
}
#if LANG_CXX11
inline void faceRecogUploadRequest::set_rawdata(::std::string&& value) {
  
  rawdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:facerecog.faceRecogUploadRequest.rawData)
}
#endif
inline void faceRecogUploadRequest::set_rawdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:facerecog.faceRecogUploadRequest.rawData)
}
inline void faceRecogUploadRequest::set_rawdata(const void* value, size_t size) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:facerecog.faceRecogUploadRequest.rawData)
}
inline ::std::string* faceRecogUploadRequest::mutable_rawdata() {
  
  // @@protoc_insertion_point(field_mutable:facerecog.faceRecogUploadRequest.rawData)
  return rawdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* faceRecogUploadRequest::release_rawdata() {
  // @@protoc_insertion_point(field_release:facerecog.faceRecogUploadRequest.rawData)
  
  return rawdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void faceRecogUploadRequest::set_allocated_rawdata(::std::string* rawdata) {
  if (rawdata != NULL) {
    
  } else {
    
  }
  rawdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawdata);
  // @@protoc_insertion_point(field_set_allocated:facerecog.faceRecogUploadRequest.rawData)
}

// int32 Width = 2;
inline void faceRecogUploadRequest::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 faceRecogUploadRequest::width() const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogUploadRequest.Width)
  return width_;
}
inline void faceRecogUploadRequest::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:facerecog.faceRecogUploadRequest.Width)
}

// int32 Hight = 3;
inline void faceRecogUploadRequest::clear_hight() {
  hight_ = 0;
}
inline ::google::protobuf::int32 faceRecogUploadRequest::hight() const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogUploadRequest.Hight)
  return hight_;
}
inline void faceRecogUploadRequest::set_hight(::google::protobuf::int32 value) {
  
  hight_ = value;
  // @@protoc_insertion_point(field_set:facerecog.faceRecogUploadRequest.Hight)
}

// int32 Channel = 4;
inline void faceRecogUploadRequest::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 faceRecogUploadRequest::channel() const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogUploadRequest.Channel)
  return channel_;
}
inline void faceRecogUploadRequest::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:facerecog.faceRecogUploadRequest.Channel)
}

// -------------------------------------------------------------------

// faceRecogUploadResponse

// int32 status = 1;
inline void faceRecogUploadResponse::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 faceRecogUploadResponse::status() const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogUploadResponse.status)
  return status_;
}
inline void faceRecogUploadResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:facerecog.faceRecogUploadResponse.status)
}

// -------------------------------------------------------------------

// faceRecogRealtimeRequest

// bytes rawData = 1;
inline void faceRecogRealtimeRequest::clear_rawdata() {
  rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& faceRecogRealtimeRequest::rawdata() const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogRealtimeRequest.rawData)
  return rawdata_.GetNoArena();
}
inline void faceRecogRealtimeRequest::set_rawdata(const ::std::string& value) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:facerecog.faceRecogRealtimeRequest.rawData)
}
#if LANG_CXX11
inline void faceRecogRealtimeRequest::set_rawdata(::std::string&& value) {
  
  rawdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:facerecog.faceRecogRealtimeRequest.rawData)
}
#endif
inline void faceRecogRealtimeRequest::set_rawdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:facerecog.faceRecogRealtimeRequest.rawData)
}
inline void faceRecogRealtimeRequest::set_rawdata(const void* value, size_t size) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:facerecog.faceRecogRealtimeRequest.rawData)
}
inline ::std::string* faceRecogRealtimeRequest::mutable_rawdata() {
  
  // @@protoc_insertion_point(field_mutable:facerecog.faceRecogRealtimeRequest.rawData)
  return rawdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* faceRecogRealtimeRequest::release_rawdata() {
  // @@protoc_insertion_point(field_release:facerecog.faceRecogRealtimeRequest.rawData)
  
  return rawdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void faceRecogRealtimeRequest::set_allocated_rawdata(::std::string* rawdata) {
  if (rawdata != NULL) {
    
  } else {
    
  }
  rawdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawdata);
  // @@protoc_insertion_point(field_set_allocated:facerecog.faceRecogRealtimeRequest.rawData)
}

// int32 Width = 2;
inline void faceRecogRealtimeRequest::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 faceRecogRealtimeRequest::width() const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogRealtimeRequest.Width)
  return width_;
}
inline void faceRecogRealtimeRequest::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:facerecog.faceRecogRealtimeRequest.Width)
}

// int32 Hight = 3;
inline void faceRecogRealtimeRequest::clear_hight() {
  hight_ = 0;
}
inline ::google::protobuf::int32 faceRecogRealtimeRequest::hight() const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogRealtimeRequest.Hight)
  return hight_;
}
inline void faceRecogRealtimeRequest::set_hight(::google::protobuf::int32 value) {
  
  hight_ = value;
  // @@protoc_insertion_point(field_set:facerecog.faceRecogRealtimeRequest.Hight)
}

// int32 Channel = 4;
inline void faceRecogRealtimeRequest::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 faceRecogRealtimeRequest::channel() const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogRealtimeRequest.Channel)
  return channel_;
}
inline void faceRecogRealtimeRequest::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:facerecog.faceRecogRealtimeRequest.Channel)
}

// -------------------------------------------------------------------

// faceRecogRealtimeResponse

// repeated int32 status = 1;
inline int faceRecogRealtimeResponse::status_size() const {
  return status_.size();
}
inline void faceRecogRealtimeResponse::clear_status() {
  status_.Clear();
}
inline ::google::protobuf::int32 faceRecogRealtimeResponse::status(int index) const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogRealtimeResponse.status)
  return status_.Get(index);
}
inline void faceRecogRealtimeResponse::set_status(int index, ::google::protobuf::int32 value) {
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:facerecog.faceRecogRealtimeResponse.status)
}
inline void faceRecogRealtimeResponse::add_status(::google::protobuf::int32 value) {
  status_.Add(value);
  // @@protoc_insertion_point(field_add:facerecog.faceRecogRealtimeResponse.status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
faceRecogRealtimeResponse::status() const {
  // @@protoc_insertion_point(field_list:facerecog.faceRecogRealtimeResponse.status)
  return status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
faceRecogRealtimeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:facerecog.faceRecogRealtimeResponse.status)
  return &status_;
}

// repeated .common.BoundingBox faceRect = 2;
inline int faceRecogRealtimeResponse::facerect_size() const {
  return facerect_.size();
}
inline ::common::BoundingBox* faceRecogRealtimeResponse::mutable_facerect(int index) {
  // @@protoc_insertion_point(field_mutable:facerecog.faceRecogRealtimeResponse.faceRect)
  return facerect_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::common::BoundingBox >*
faceRecogRealtimeResponse::mutable_facerect() {
  // @@protoc_insertion_point(field_mutable_list:facerecog.faceRecogRealtimeResponse.faceRect)
  return &facerect_;
}
inline const ::common::BoundingBox& faceRecogRealtimeResponse::facerect(int index) const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogRealtimeResponse.faceRect)
  return facerect_.Get(index);
}
inline ::common::BoundingBox* faceRecogRealtimeResponse::add_facerect() {
  // @@protoc_insertion_point(field_add:facerecog.faceRecogRealtimeResponse.faceRect)
  return facerect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common::BoundingBox >&
faceRecogRealtimeResponse::facerect() const {
  // @@protoc_insertion_point(field_list:facerecog.faceRecogRealtimeResponse.faceRect)
  return facerect_;
}

// -------------------------------------------------------------------

// faceRecogHistoryRequest

// repeated string imagePath = 1;
inline int faceRecogHistoryRequest::imagepath_size() const {
  return imagepath_.size();
}
inline void faceRecogHistoryRequest::clear_imagepath() {
  imagepath_.Clear();
}
inline const ::std::string& faceRecogHistoryRequest::imagepath(int index) const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogHistoryRequest.imagePath)
  return imagepath_.Get(index);
}
inline ::std::string* faceRecogHistoryRequest::mutable_imagepath(int index) {
  // @@protoc_insertion_point(field_mutable:facerecog.faceRecogHistoryRequest.imagePath)
  return imagepath_.Mutable(index);
}
inline void faceRecogHistoryRequest::set_imagepath(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:facerecog.faceRecogHistoryRequest.imagePath)
  imagepath_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void faceRecogHistoryRequest::set_imagepath(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:facerecog.faceRecogHistoryRequest.imagePath)
  imagepath_.Mutable(index)->assign(std::move(value));
}
#endif
inline void faceRecogHistoryRequest::set_imagepath(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  imagepath_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:facerecog.faceRecogHistoryRequest.imagePath)
}
inline void faceRecogHistoryRequest::set_imagepath(int index, const char* value, size_t size) {
  imagepath_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:facerecog.faceRecogHistoryRequest.imagePath)
}
inline ::std::string* faceRecogHistoryRequest::add_imagepath() {
  // @@protoc_insertion_point(field_add_mutable:facerecog.faceRecogHistoryRequest.imagePath)
  return imagepath_.Add();
}
inline void faceRecogHistoryRequest::add_imagepath(const ::std::string& value) {
  imagepath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:facerecog.faceRecogHistoryRequest.imagePath)
}
#if LANG_CXX11
inline void faceRecogHistoryRequest::add_imagepath(::std::string&& value) {
  imagepath_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:facerecog.faceRecogHistoryRequest.imagePath)
}
#endif
inline void faceRecogHistoryRequest::add_imagepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  imagepath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:facerecog.faceRecogHistoryRequest.imagePath)
}
inline void faceRecogHistoryRequest::add_imagepath(const char* value, size_t size) {
  imagepath_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:facerecog.faceRecogHistoryRequest.imagePath)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
faceRecogHistoryRequest::imagepath() const {
  // @@protoc_insertion_point(field_list:facerecog.faceRecogHistoryRequest.imagePath)
  return imagepath_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
faceRecogHistoryRequest::mutable_imagepath() {
  // @@protoc_insertion_point(field_mutable_list:facerecog.faceRecogHistoryRequest.imagePath)
  return &imagepath_;
}

// -------------------------------------------------------------------

// faceRecogHistoryResponse

// repeated int32 index = 1;
inline int faceRecogHistoryResponse::index_size() const {
  return index_.size();
}
inline void faceRecogHistoryResponse::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::int32 faceRecogHistoryResponse::index(int index) const {
  // @@protoc_insertion_point(field_get:facerecog.faceRecogHistoryResponse.index)
  return index_.Get(index);
}
inline void faceRecogHistoryResponse::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:facerecog.faceRecogHistoryResponse.index)
}
inline void faceRecogHistoryResponse::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:facerecog.faceRecogHistoryResponse.index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
faceRecogHistoryResponse::index() const {
  // @@protoc_insertion_point(field_list:facerecog.faceRecogHistoryResponse.index)
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
faceRecogHistoryResponse::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:facerecog.faceRecogHistoryResponse.index)
  return &index_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace facerecog

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_FaceRecogAPI_2eproto
