// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrowdCountAPI.proto

#ifndef PROTOBUF_INCLUDED_CrowdCountAPI_2eproto
#define PROTOBUF_INCLUDED_CrowdCountAPI_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_CrowdCountAPI_2eproto 

namespace protobuf_CrowdCountAPI_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_CrowdCountAPI_2eproto
namespace crowdcount {
class crowdCountRequest;
class crowdCountRequestDefaultTypeInternal;
extern crowdCountRequestDefaultTypeInternal _crowdCountRequest_default_instance_;
class crowdCountResponse;
class crowdCountResponseDefaultTypeInternal;
extern crowdCountResponseDefaultTypeInternal _crowdCountResponse_default_instance_;
}  // namespace crowdcount
namespace google {
namespace protobuf {
template<> ::crowdcount::crowdCountRequest* Arena::CreateMaybeMessage<::crowdcount::crowdCountRequest>(Arena*);
template<> ::crowdcount::crowdCountResponse* Arena::CreateMaybeMessage<::crowdcount::crowdCountResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace crowdcount {

// ===================================================================

class crowdCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:crowdcount.crowdCountRequest) */ {
 public:
  crowdCountRequest();
  virtual ~crowdCountRequest();

  crowdCountRequest(const crowdCountRequest& from);

  inline crowdCountRequest& operator=(const crowdCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  crowdCountRequest(crowdCountRequest&& from) noexcept
    : crowdCountRequest() {
    *this = ::std::move(from);
  }

  inline crowdCountRequest& operator=(crowdCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const crowdCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const crowdCountRequest* internal_default_instance() {
    return reinterpret_cast<const crowdCountRequest*>(
               &_crowdCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(crowdCountRequest* other);
  friend void swap(crowdCountRequest& a, crowdCountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline crowdCountRequest* New() const final {
    return CreateMaybeMessage<crowdCountRequest>(NULL);
  }

  crowdCountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<crowdCountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const crowdCountRequest& from);
  void MergeFrom(const crowdCountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(crowdCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes rawData = 1;
  void clear_rawdata();
  static const int kRawDataFieldNumber = 1;
  const ::std::string& rawdata() const;
  void set_rawdata(const ::std::string& value);
  #if LANG_CXX11
  void set_rawdata(::std::string&& value);
  #endif
  void set_rawdata(const char* value);
  void set_rawdata(const void* value, size_t size);
  ::std::string* mutable_rawdata();
  ::std::string* release_rawdata();
  void set_allocated_rawdata(::std::string* rawdata);

  // .common.BoundingBox Rect = 2;
  bool has_rect() const;
  void clear_rect();
  static const int kRectFieldNumber = 2;
  private:
  const ::common::BoundingBox& _internal_rect() const;
  public:
  const ::common::BoundingBox& rect() const;
  ::common::BoundingBox* release_rect();
  ::common::BoundingBox* mutable_rect();
  void set_allocated_rect(::common::BoundingBox* rect);

  // int32 Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 Hight = 4;
  void clear_hight();
  static const int kHightFieldNumber = 4;
  ::google::protobuf::int32 hight() const;
  void set_hight(::google::protobuf::int32 value);

  // int32 Channel = 5;
  void clear_channel();
  static const int kChannelFieldNumber = 5;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:crowdcount.crowdCountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rawdata_;
  ::common::BoundingBox* rect_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 hight_;
  ::google::protobuf::int32 channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_CrowdCountAPI_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class crowdCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:crowdcount.crowdCountResponse) */ {
 public:
  crowdCountResponse();
  virtual ~crowdCountResponse();

  crowdCountResponse(const crowdCountResponse& from);

  inline crowdCountResponse& operator=(const crowdCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  crowdCountResponse(crowdCountResponse&& from) noexcept
    : crowdCountResponse() {
    *this = ::std::move(from);
  }

  inline crowdCountResponse& operator=(crowdCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const crowdCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const crowdCountResponse* internal_default_instance() {
    return reinterpret_cast<const crowdCountResponse*>(
               &_crowdCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(crowdCountResponse* other);
  friend void swap(crowdCountResponse& a, crowdCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline crowdCountResponse* New() const final {
    return CreateMaybeMessage<crowdCountResponse>(NULL);
  }

  crowdCountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<crowdCountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const crowdCountResponse& from);
  void MergeFrom(const crowdCountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(crowdCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 rectNum = 1;
  void clear_rectnum();
  static const int kRectNumFieldNumber = 1;
  ::google::protobuf::int32 rectnum() const;
  void set_rectnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:crowdcount.crowdCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 rectnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_CrowdCountAPI_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// crowdCountRequest

// bytes rawData = 1;
inline void crowdCountRequest::clear_rawdata() {
  rawdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& crowdCountRequest::rawdata() const {
  // @@protoc_insertion_point(field_get:crowdcount.crowdCountRequest.rawData)
  return rawdata_.GetNoArena();
}
inline void crowdCountRequest::set_rawdata(const ::std::string& value) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crowdcount.crowdCountRequest.rawData)
}
#if LANG_CXX11
inline void crowdCountRequest::set_rawdata(::std::string&& value) {
  
  rawdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:crowdcount.crowdCountRequest.rawData)
}
#endif
inline void crowdCountRequest::set_rawdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crowdcount.crowdCountRequest.rawData)
}
inline void crowdCountRequest::set_rawdata(const void* value, size_t size) {
  
  rawdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crowdcount.crowdCountRequest.rawData)
}
inline ::std::string* crowdCountRequest::mutable_rawdata() {
  
  // @@protoc_insertion_point(field_mutable:crowdcount.crowdCountRequest.rawData)
  return rawdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* crowdCountRequest::release_rawdata() {
  // @@protoc_insertion_point(field_release:crowdcount.crowdCountRequest.rawData)
  
  return rawdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void crowdCountRequest::set_allocated_rawdata(::std::string* rawdata) {
  if (rawdata != NULL) {
    
  } else {
    
  }
  rawdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rawdata);
  // @@protoc_insertion_point(field_set_allocated:crowdcount.crowdCountRequest.rawData)
}

// .common.BoundingBox Rect = 2;
inline bool crowdCountRequest::has_rect() const {
  return this != internal_default_instance() && rect_ != NULL;
}
inline const ::common::BoundingBox& crowdCountRequest::_internal_rect() const {
  return *rect_;
}
inline const ::common::BoundingBox& crowdCountRequest::rect() const {
  const ::common::BoundingBox* p = rect_;
  // @@protoc_insertion_point(field_get:crowdcount.crowdCountRequest.Rect)
  return p != NULL ? *p : *reinterpret_cast<const ::common::BoundingBox*>(
      &::common::_BoundingBox_default_instance_);
}
inline ::common::BoundingBox* crowdCountRequest::release_rect() {
  // @@protoc_insertion_point(field_release:crowdcount.crowdCountRequest.Rect)
  
  ::common::BoundingBox* temp = rect_;
  rect_ = NULL;
  return temp;
}
inline ::common::BoundingBox* crowdCountRequest::mutable_rect() {
  
  if (rect_ == NULL) {
    auto* p = CreateMaybeMessage<::common::BoundingBox>(GetArenaNoVirtual());
    rect_ = p;
  }
  // @@protoc_insertion_point(field_mutable:crowdcount.crowdCountRequest.Rect)
  return rect_;
}
inline void crowdCountRequest::set_allocated_rect(::common::BoundingBox* rect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rect_);
  }
  if (rect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    
  } else {
    
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:crowdcount.crowdCountRequest.Rect)
}

// int32 Width = 3;
inline void crowdCountRequest::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 crowdCountRequest::width() const {
  // @@protoc_insertion_point(field_get:crowdcount.crowdCountRequest.Width)
  return width_;
}
inline void crowdCountRequest::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:crowdcount.crowdCountRequest.Width)
}

// int32 Hight = 4;
inline void crowdCountRequest::clear_hight() {
  hight_ = 0;
}
inline ::google::protobuf::int32 crowdCountRequest::hight() const {
  // @@protoc_insertion_point(field_get:crowdcount.crowdCountRequest.Hight)
  return hight_;
}
inline void crowdCountRequest::set_hight(::google::protobuf::int32 value) {
  
  hight_ = value;
  // @@protoc_insertion_point(field_set:crowdcount.crowdCountRequest.Hight)
}

// int32 Channel = 5;
inline void crowdCountRequest::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 crowdCountRequest::channel() const {
  // @@protoc_insertion_point(field_get:crowdcount.crowdCountRequest.Channel)
  return channel_;
}
inline void crowdCountRequest::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:crowdcount.crowdCountRequest.Channel)
}

// -------------------------------------------------------------------

// crowdCountResponse

// int32 rectNum = 1;
inline void crowdCountResponse::clear_rectnum() {
  rectnum_ = 0;
}
inline ::google::protobuf::int32 crowdCountResponse::rectnum() const {
  // @@protoc_insertion_point(field_get:crowdcount.crowdCountResponse.rectNum)
  return rectnum_;
}
inline void crowdCountResponse::set_rectnum(::google::protobuf::int32 value) {
  
  rectnum_ = value;
  // @@protoc_insertion_point(field_set:crowdcount.crowdCountResponse.rectNum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace crowdcount

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_CrowdCountAPI_2eproto
